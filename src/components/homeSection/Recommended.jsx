import { useEffect, useState, useRef } from "react";
import styles from "./Recommended.module.css";
import { getRecommendedJuice } from "../../mockData/getData";

//
const ProductSlider = () => {
    const trackRef = useRef(null);
    const [products, setProducts] = useState([]);
    const [currentIndex, setCurrentIndex] = useState(0);
    const itemsToShow = 3;
    const ITEM_WIDTH_REM = 30;
    const discount = 0.8
    // ÏûêÎèô Ïä¨ÎùºÏù¥Îìú Ïù∏ÌÑ∞Î≤å IDÎ•º Ï†ÄÏû•Ìï† ref
    const intervalRef = useRef(null);

    // ÏÉÅÌíà Î™©Î°ù Ï¥àÍ∏∞Ìôî (Î¨¥Ìïú Ïä¨ÎùºÏù¥ÎìúÎ•º ÏúÑÌïú Î≥µÏ†ú Ìè¨Ìï®)
    useEffect(() => {
        const allProducts = getRecommendedJuice;
        setProducts([...allProducts, ...allProducts.slice(0, itemsToShow)]);
    }, []);

    // üí° ÏûêÎèô Ïä¨ÎùºÏù¥Îìú Î°úÏßÅ Î∂ÑÎ¶¨ Î∞è Ïû¨ÏãúÏûë Ìï®Ïàò
    const startAutoSlide = () => {
        // Í∏∞Ï°¥ Ïù∏ÌÑ∞Î≤åÏù¥ ÏûàÎã§Î©¥ Ìï¥Ï†ú
        if (intervalRef.current) {
            clearInterval(intervalRef.current);
        }

        intervalRef.current = setInterval(() => {
            setCurrentIndex(prevIndex => {
                const nextIndex = prevIndex + 1;
                if (nextIndex >= products.length - itemsToShow) {
                    // ÎßàÏßÄÎßâ Î≥µÏ†úÎ≥∏ÏúºÎ°ú Ïù¥ÎèôÌïòÍ∏∞ Ï†ÑÏóê transitionÏùÑ ÎÅÑÍ≥† 0ÏúºÎ°ú Ïù¥Îèô
                    if (trackRef.current) {
                        trackRef.current.style.transition = 'transform 0.3s ease-in-out';
                    }
                    return nextIndex;
                } else {
                    if (trackRef.current) {
                        trackRef.current.style.transition = 'transform 0.3s ease-in-out';
                    }
                    return nextIndex;
                }
            });
        }, 3000);
    };

    // üí° Î¨¥Ìïú Î£®ÌîÑ Ï≤òÎ¶¨ Î°úÏßÅ (transition reset)
    useEffect(() => {
        if (products.length === 0) return;

        if (currentIndex === products.length - itemsToShow) {
            // Î≥µÏ†úÎêú ÎßàÏßÄÎßâ ÏïÑÏù¥ÌÖúÏùÑ Î≥¥Ïó¨Ï§Ä ÌõÑ 0ÏúºÎ°ú Ï¶âÏãú Ïù¥Îèô
            const timeout = setTimeout(() => {
                if (trackRef.current) {
                    trackRef.current.style.transition = 'none';
                    setCurrentIndex(0);
                }
            }, 300); // transition ÏãúÍ∞Ñ(0.3s)Í≥º ÏùºÏπòÏãúÏºú Î∂ÄÎìúÎüΩÍ≤å Ïó∞Í≤∞
            return () => clearTimeout(timeout);
        }
    }, [currentIndex, products]);


    // üí° Ïª¥Ìè¨ÎÑåÌä∏ ÎßàÏö¥Ìä∏ Ïãú ÏûêÎèô Ïä¨ÎùºÏù¥Îìú ÏãúÏûë Î∞è Ïñ∏ÎßàÏö¥Ìä∏ Ïãú Ìï¥Ï†ú
    useEffect(() => {
        if (products.length > 0) {
            startAutoSlide();
        }
        return () => clearInterval(intervalRef.current);
    }, [products]); // productsÍ∞Ä Î°úÎìúÎêú ÌõÑ ÏãúÏûë


    // --- Î≤ÑÌäº Ìï∏Îì§Îü¨ Ìï®Ïàò ---
    const handlePrev = () => {
        clearInterval(intervalRef.current); // ÌÅ¥Î¶≠ Ïãú ÏûêÎèô Ïä¨ÎùºÏù¥Îìú ÏùºÏãú Ï†ïÏßÄ
        if (trackRef.current) {
            trackRef.current.style.transition = 'transform 0.3s ease-in-out';
        }

        setCurrentIndex(prevIndex => {

            if (prevIndex === 0) {
                const lastRealIndex = products.length - itemsToShow;
                trackRef.current.style.transition = 'none';
                const tempIndex = lastRealIndex;

                setTimeout(() => {
                    if (trackRef.current) {
                        trackRef.current.style.transition = 'transform 0.3s ease-in-out';
                        setCurrentIndex(lastRealIndex - 1);
                    }
                }, 0);
                return tempIndex;
            }
            return prevIndex - 1;
        });
        startAutoSlide(); // Îã§Ïãú ÏûêÎèô Ïä¨ÎùºÏù¥Îìú ÏãúÏûë
    };

    const handleNext = () => {
        clearInterval(intervalRef.current);

        if (trackRef.current) {
            trackRef.current.style.transition = 'transform 0.3s ease-in-out';
        }

        setCurrentIndex(prevIndex => {
            const lastRealIndex = products.length - itemsToShow;
            const nextIndex = prevIndex + 1;

            if (nextIndex > lastRealIndex) {
                return lastRealIndex;
            }
            return nextIndex;
        });
        startAutoSlide();
    };

    // -------------------------

    return (
        <>
            <div className={styles.title}>{'Recommended Juices'}</div>
            <div className={styles.description}>{'Discover today\'s recommended juice to revitalize your day!'}</div>
            <div className={styles.slide}>
                <div className={styles.slideFrame}>
                    <div
                        className={styles.slideTrack}
                        ref={trackRef}
                        style={{
                            width: `${ITEM_WIDTH_REM * products.length}rem`,
                            transform: `translateX(-${currentIndex * ITEM_WIDTH_REM}rem)`,
                            // transitionÏùÄ useEffectÏóêÏÑú Ï†úÏñ¥
                        }}
                    >
                        {products.map((product, index) => (
                            <div
                                key={index}
                                className={styles.productBox}
                                style={{ width: `${ITEM_WIDTH_REM}rem`, height: '40rem' }}
                            >
                                {/* ÏÉÅÌíà ÏΩòÌÖêÏ∏† (Í∏∞Ï°¥Í≥º ÎèôÏùº) */}
                                <img
                                    className={styles.productImg}
                                    src={product.imageSrc}
                                    alt={product.productName}
                                />
                                <div className={styles.productName}>{product.productName}</div>
                                <div className={styles.productPriceBox}>
                                    <div className={styles.productSalePrice}>{`‚Ç© ${Math.round(product.onSale ? product.price_krw * discount : product.price_krw).toLocaleString()}`}</div>
                                    <div className={styles.productPrice}>{product.onSale ? `‚Ç© ${product.price_krw.toLocaleString()}` : ''}</div>
                                </div>
                                {product.onSale && <div className={styles.productOnSale}>20% SALE</div>}
                            </div>
                        ))}
                    </div>
                </div>

                {/* üí° Ïä¨ÎùºÏù¥Îìú Î≤ÑÌäº Ï∂îÍ∞Ä */}
                <button
                    className={`${styles.slideButton} ${styles.prevButton}`}
                    onClick={handlePrev}
                >
                    &lt;
                </button>
                <button
                    className={`${styles.slideButton} ${styles.nextButton}`}
                    onClick={handleNext}
                >
                    &gt;
                </button>
            </div>
            <div className={styles.viewAllProducts}>
                <button>VIEW ALL PRODUCT</button>
            </div>
        </>
    );
};

export default ProductSlider;
